# 以下 请求头 和 响应头 按顺序配对

Request Header:
    # 指定 Client 当前发送内容的 MIME-Type 以及 Charset Boundary 等参数
    Content-Type: text/html; charset=utf-8; boundary=----kaseihaku
    
    # 对应 Server Header Content-Type 中的 MIME-Type; 指定 Client 可以接收的 MIME 类型
    Accept: text/html, application/json;q=1.0, application/xml;q=0.9, */*;q=0.8  # q=权重，不设置默认 1.0 比如 text/html
    
    # 对应 Server Header Content-Type 中的 charset; 指定 Client 可以接收的 字符集 类型
    Accept-Charset: utf-8;q=1.0, iso-8859-1;q=0.5, *;q=0.1   
    
    # 对应 Server Header Content-Encoding; 指定 Client 可以接受 压缩算法 类型
    Accept-Encoding: gzip;q=1.0, compress;q=0.9, deflate;q=0.5, br;q=0.3, identity;q=0.1, *;q=0.0
    
    # 对应 Server Header Content-Language;
    Accept-Language: en-US;q=1.0, zh-CN;q=0.5, *;q=0.1
    
Response Header:
    # 指定 Server 当前返回内容的 MIME-Type 以及 Charset Boundary 等参数
    Content-Type: text/html; charset=utf-8; boundary=----kaseihaku
    
    # 
    Content-Disposition: 
    
    # 指定 Server 可以接受的 Media-Type 类型
    Accept-Patch: text/example;charset=utf-8
    
    # 指定 Server 是否可以接受 局部或者分段 请求
    Accept-Ranges: bytes
    
    
短连接： HTTP 协议中，一次请求创建一个 TCP 连接，请求返回后立马关闭该连接，且服务器不保存请求相关的数据，即无状态
长连接： HTTP 协议中，一次请求创建一个 TCP 连接，请求返回后服务器不关闭该 TCP 连接，客户端可以通过该 TCP 连接发送多个请求
轮询： 指客户端指定一定时间间隔发送请求到服务器，查看是否有新的数据，有则服务器返回新数据，无则返回空结果
长轮询： 指客户端像轮询一样发送请求到服务器，如果没有新数据，服务器不会立即返回空结果，而是设置一个超时时间，如果在超时时间内出现了新的数据，则返回新数据，如果没有则关闭连接
WebSocket： 跟普通是 Socket 一样，维持一个全双工的 TCP 连接，服务器可以随时推送消息到客户端，客户端也可以随时发送数据到服务器
