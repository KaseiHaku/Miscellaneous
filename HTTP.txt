URL 标准格式:
    scheme://userinfo@host:port/path?query#fragment
    protocol://user:password@host-one:port/path;params1=XXX;sessionid=1234?query1=value1&ampquery2=value2#frag
    URL 地址 domain 中可以使用中划线 - 但是不能使用下划线 _ ,

Http 协议方法：idempotent(幂等)，表示多次执行相同的操作，结果一致
    GET         安全且幂等，向服务器请求特定的资源，并在响应体中返回请求的资源
    POST        不安全且不幂等，创建资源，使用服务端（自动生成）的实例号创建资源
    PUT         不安全但幂等，修改资源，向指定资源位置上传其最新内容
    DELETE      不安全但幂等，请求服务器删除 Request-URI 所标识的资源 

    HEAD        安全且幂等，相当于 GET 请求，但是只返回响应头 
    OPTIONS     返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送'*'的请求来测试服务器的功能性
    PATCH       表示对资源进行部分修改
    TRACE       回显服务器收到的请求，主要用于测试或诊断
    CONNECT     使用代理的时候用于连接代理服务器

Request 请求格式：
    请求方法 空格 URL 空格 协议版本 回车符 换行符
    头部字段名:值 回车符 换行符
    ...
    头部字段名:值 回车符 换行符
    回车符 换行符
    请求数据
    
Response 返回格式：
    协议版本 空格 状态码 空格 状态名 回车符 换行符
    头部字段名:值 回车符 换行符
    ...
    头部字段名:值 回车符 换行符
    回车符 换行符
    响应正文

Response Status:
    @doc https://www.rfc-editor.org/rfc/rfc9110#name-status-codes


Web 乱码问题:
    URL 地址：
        根据 http 协议规定 URL 的字符集必须是 ISO-8859-1 编码格式的，URL 本身编码不确定，服务端根本无法处理。
        URL 中如果包含中文，则必须转码成 ISO-8859-1 字符集中的字符
        
        如果乱码，可以如下处理：
            URL 中包含中文，后台获取参数值乱码，在 %TOMCAT_HOME%/conf/Server.xml <Connector/> 标签中添加 URIEncoding="UTF-8" 属性，
            该方法只对 Get 方法有效，Post 请求正文中编码还是 ISO8859-1 编码格式的
            useBodyEncodingForURI="true" 表示只对 URL 参数部分编码，即 ? 和 # 之间的字符采用 URIEncoding="UTF-8" 配置的编码格式编码
            <Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" URIEncoding="UTF-8" useBodyEncodingForURI="true"/>
        
    Http Header:
        1. 根据 http 协议规定 Http Header 中的字符同样必须是 ISO-8859-1 格式的，因为 Http Header 包含 Body 的编码信息，如果本身编码不确定，服务端根本无法处理
        2. 根据 http 协议规定 Http Header 中的 Field 字段名是不区分大小写的，但是 Http Method 很多情况下是区分的，最好用大写
        
        后端读取的时候，需要重新编码为 UTF-8, 否则会出现 "abc".equals("abc") == false 的情况，
        注：括号内的 abc 为从 Http Header 中获取的。sout() 的时候两个看着一模一样，但是底层二进制编码不一样
        
    Http Body:
        根据请求头 Content-Type 来确定 Body 的编码格式
   

WEB 运行模式介绍：
1、client 发送一个 HTTP 头文件到指定服务器;头文件里包括URL、浏览器可接收编码格式、请求正文编码等
2、server 接收到头文件后，根据头文件所含内容返回指定数据
        如果请求的文件是.html则直接返回该文件给client
        如果请求的文件是.php则现在server上执行php脚本后生成纯html文件返回给client
3、POST 和 GET 请求都需要把数据传送到确定的php文件中，server会在接受到请求后运行该php文件，并以纯html格式返回



# 以下 请求头 和 响应头 按顺序配对

Request Header:
    # 指定 Client 当前发送内容的 MIME-Type 以及 Charset Boundary 等参数
    Content-Type: text/html; charset=utf-8; boundary=----kaseihaku
    
    # 对应 Server Header Content-Type 中的 MIME-Type; 指定 Client 可以接收的 MIME 类型
    Accept: text/html, application/json;q=1.0, application/xml;q=0.9, */*;q=0.8  # q=权重，不设置默认 1.0 比如 text/html
    
    # 对应 Server Header Content-Type 中的 charset; 指定 Client 可以接收的 字符集 类型
    Accept-Charset: utf-8;q=1.0, iso-8859-1;q=0.5, *;q=0.1   
    
    # 对应 Server Header Content-Encoding; 指定 Client 可以接受 压缩算法 类型
    Accept-Encoding: gzip;q=1.0, compress;q=0.9, deflate;q=0.5, br;q=0.3, identity;q=0.1, *;q=0.0
    
    # 对应 Server Header Content-Language;
    Accept-Language: en-US;q=1.0, zh-CN;q=0.5, *;q=0.1
    
    
    
Response Header:
    # 指定 Server 当前返回内容的 MIME-Type 以及 Charset Boundary 等参数
    Content-Type: text/html; charset=utf-8; boundary=----kaseihaku
    
    # 返回内容长度相关头
    # Server 返回数据流程:
    #   1. 将 response body 写入到 buffer 中，
    #   2. 如果 buffer 够大，能写入所有 body，那么使用 Content-Length 头，
    #      否则使用 Transfer-Encoding 头
    #   3. 因为数据在 buffer 中，所以 os.close(); 之前，必须执行 os.flush(); 将 buffer 中的内容写出
    Content-Length:                     # 直接指明返回内容的长度
    Transfer-Encoding: chunked          # 表明返回内容不全，https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Transfer-Encoding
    
    # 
    Content-Disposition: 
    
    # 指定 Server 可以接受的 Media-Type 类型
    Accept-Patch: text/example;charset=utf-8
    
    # 指定 Server 是否可以接受 局部或者分段 请求
    Accept-Ranges: bytes
    
    
TCP 短连接： HTTP 协议中，一次请求创建一个 TCP 连接，请求返回后立马关闭该连接，且服务器不保存请求相关的数据，即无状态
TCP 长连接： HTTP 协议中，一次请求创建一个 TCP 连接，请求返回后服务器不关闭该 TCP 连接，客户端可以通过该 TCP 连接发送多个请求

短轮询： 指客户端指定一定时间间隔发送请求到服务器，查看是否有新的数据，有则服务器返回新数据，无则返回空结果
长轮询： 指客户端像轮询一样发送请求到服务器，如果没有新数据，服务器不会立即返回空结果，而是设置一个超时时间，如果在超时时间内出现了新的数据，则返回新数据，如果没有则关闭连接
SSE(Server-Sent Events): client 和 server 维持一个 TCP 长连接，但是仅允许 server 向 client 单向传输数据，
WebSocket： 跟普通是 Socket 一样，维持一个全双工的 TCP 长连接，服务器可以随时推送消息到客户端，客户端也可以随时发送数据到服务器
WebTransport: 下一代 web 实时通信技术




WebSocket Protocol Procedure:
    - 发送协议升级请求，格式如下:
        GET / HTTP/1.1                                        # 必须是 GET 方法
        Host: localhost:8080                                  # @trap 必须存在，不然 server 不知道跟谁建立 websocket 连接
        Origin: http://127.0.0.1:3000                         # @trap 必须存在，不然 server 无法判断当前 websocket 是否跨域
        Connection: Upgrade                                   # 表示要升级协议 
        Upgrade: websocket                                    # 表示要升级到 websocket 协议
        Sec-WebSocket-Version: 13                             # 表示 websocket 的版本。如果服务端不支持该版本，需要返回一个 Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。
        Sec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==           # 与后面服务端响应首部的 Sec-WebSocket-Accept 是配套的，提供基本的防护，比如恶意的连接，或者无意的连接。

    - 服务端响应:
        HTTP/1.1 101 Switching Protocols                      # 101 表示协议升级成功
        Connection:Upgrade
        Upgrade: websocket
        Sec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=    # 与协议升级请求中的 Sec-WebSocket-Key 配套的，计算公式为: Base64(Hash(Sec-WebSocket-Key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'))








