CSRF(Cross-site request forgery):
    主要原因：浏览器在给同源域名发送请求时，会自动带上该域名的 Cookie
    攻击步骤：
        1. User 访问正常的网站 A，并登陆，获取 Cookie 存在浏览器
        2. User 访问恶意网站 B，
        3. 恶意网站自动向 A 发送一个请求，执行某个动作，而因为 浏览器访问同源域名时的 Cookie 策略，自动带上 A 原先登陆的 Cookie
        4. A 的服务器只认 Cookie，认为是 User 发出的请求，执行动作，
        5. 完成攻击
    预防方法：
        判断 HttpHeader 中的 Origin Header(来源域名), Referer Header(引用域名)
        一个额外的 CSRF Token，不放在 Cookie 里，不会被浏览器自动发送到服务器，发请求时手动添加到请求中
        双重 Cookie :
            1. 登陆时，服务器产生 randomCode 放入 Cookie 中
            2. 请求时，要求 client 将 randomCode 放在请求中一起传过来
            3. 服务器获取 Cookie 中的 randomCode 和 请求中的 randomCode 对比，一样表示没问题，否则拒绝
        Samesite Cookie: A 站的 Cookie 只有在 A 站发请求才会携带，B 站发请求到 A 站不会携带该 Cookie
    
XSS(Cross-site scripting):
    在页面上注入恶意代码(包括 JS, HTML, ...) 相当于后端的 SQL 注入

    Stored XSS
        攻击步骤：
            1. 攻击者将恶意代码提交到目标网站的数据库中。
            2. 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。
            3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。
            4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。
            
        这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。
        
    Reflect XSS
        攻击步骤：
            1. 攻击者构造出特殊的 URL，其中包含恶意代码。
            2. 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。
            3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。
            4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。
            
        反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。
        反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。
        由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。
        POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。
        
    DOM Based XSS
        攻击步骤：
            1. 攻击者构造出特殊的 URL，其中包含恶意代码。
            2. 用户打开带有恶意代码的 URL。
            3. 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。
            4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。
            
        DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。

        
    预防方法：
        通过前面的介绍可以得知，XSS 攻击有两大要素：
            1. 攻击者提交恶意代码。
            2. 浏览器执行恶意代码。
            
        针对 提交恶意代码 的预防方法：
            对提交的内容中的特殊字符进行转码。不可靠，不建议使用
            
        针对 执行恶意代码 的预防方法：
            预防存储型和反射型 XSS 攻击：
                改成纯前端渲染，把代码和数据分隔开
                    在纯前端渲染中，我们会明确的告诉浏览器：
                        下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。
                    但纯前端渲染还需注意避免 DOM 型 XSS 漏洞（例如 onload 事件和 href 中的 javascript:xxx 等，请参考下文”预防 DOM 型 XSS 攻击“部分）。
                    在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。

                对 HTML 做充分转义，使用成熟的转义库，禁止自己写，Java 工程里，常用的转义库为 org.owasp.encoder
                
            预防 DOM 型 XSS 攻击：
                DOM 型 XSS 攻击，实际上就是网站前端 JavaScript 代码本身不够严谨，把不可信的数据当作代码执行了。
                在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。
                如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。
                DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等，<a> 标签的 href 属性，
                JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。
            
            其他预防方法：
                禁止加载外域代码，防止复杂的攻击逻辑。
                禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。
                禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。
                禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。
                合理使用上报可以及时发现 XSS，利于尽快修复问题。
                对于不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度。
                HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。
                验证码：防止脚本冒充用户提交危险操作。
