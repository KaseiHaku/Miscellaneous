TLS/HTTPS 加密原理：
    
    原始：
        Server 直接使用明文给 Client 发送消息
        
    问题 1：
        传输内容会被 Hacker 截取、篡改
        
    改进一：
        Server 和 Client 约定一个 对称加密 的密钥，然后双方都使用该密钥对发送内容加密后再发送
    
    问题 1： 
        由于互联网环境 Server 和 Client 双方互不相认，那么必须通过明文先约定密钥才行，那么明文密钥在传输过程中被 Hacker 劫持了呢？
        如果被密钥被劫持，那么通信内容就完全暴露给 Hacker 了
        
    改进二：
        Server 和 Client 使用 不对称加密，Server 通过明文将公钥（任何人可见）传给 Client，
        Client 使用公钥加密数据后发送给 Server，
        Server 通过私钥解密后得到原文
        Client 给 Server 传数据则相反，
    
    问题 1：
        冒充问题：
        假如 Client 发送一个请求（包含　Client 的公钥）给 Server，Hacker 拦截并获取了该请求，
        然后 Hacker 又转发了 Client 的请求（修改为 Hacker 自己的公钥），将其发送给真正的 Server，
        真正的 Server 采用 Hacker 的公钥加密一个应答数据（包含 Server 的公钥）并给 Hacker，
        Hacker 使用自己的私钥解密应答数据，获取内容，
        Hakcer 假冒真正的 Server 使用 Client 的公钥重新加密获取的应答内容（包含 Hacker 的公钥），发送给 Client
        完成一次完整的请求应答过程，该过程中 Client 完全不知道数据已经被窃取。

        冒充数据流向：
        发送：Client - data -> 黑客 - data -> Server
        应答：Server - data -> 黑客 - data -> Client
    
    改进三：
        使用公信机构，即 CA(Certification Authority)机构
        操作系统 或 浏览器 本身预装一些他们信任的 根证书，那么 Client（浏览器） 就知道 根证书中的公钥是绝对正确的，
        Server 使用 HTTPS 前，向 CA机构 提交数字证书的证书内容（该内容包含 持有者的公钥、域名 等信息）用于制作数字证书
        CA 机构使用 Hash 算法对证书内容（明文）进行计算，得到证书内容的 消息摘要A，
        CA 机构使用 自己的 私钥 对生成的 消息摘要A 加密，那么所有拥有 CA机构公钥 的 Client 都可以得到 消息摘要A 的内容，
        Client 根据相同的 Hash 算法对 证书内容（明文）进行计算，得到 消息摘要B
        Client 对比 消息摘要A 和 B ，如果相等，则说明可信
        
        数字证书为什么不会被篡改？
        当证书内容被篡改，那么消息摘要肯定会改变。因为不对称加密，公钥私钥只能互解，如果 Hacker 不对消息摘要重新用 CA私钥加密，
        那么 Client 使用 CA公钥解密后的内容就会与计算出来的内容不一致，验证失败。
        
        数字证书为什么不会被调包？
        数字证书内容部分是明文，Client 知道自己访问的是 www.google.com, 而返回的是 www.kasei.com ,那么肯定有问题。
        
        
        数字证书 = 证书内容 + 内容的数字签名（被 CA机构使用私钥加密）

    问题 1：
        公司内网 OS 等被恶意安装非法 CA 证书的问题：
        Server 发送 Packet 到 Hacker Proxy
        Hacker Proxy 解密，并重新使用 非法 CA 进行加密后，再发给 Client
        Client 因为被 恶意安装和信任了 非法 CA 证书，导致非法 CA 证书通过了 证书合法性验证，从而完成了攻击过程

    改进四：
        方案一：客户端软件内置所有信任的 CA 证书，不允许额外安装和信任新的 CA 证书; 即: Pinned Pub Key
        @trap 该方案仅适用于 客户端软件可以完全自主控制的场景，并不适合 Browser 场景。
              如果客户端软件无法完全自主控制，信任了非法的 CA 证书，任何手段都无法保证不被抓包和篡改请求数据，包括 加签 和 加密。 

        方案二：在原本 HTTPS 加密之内，再套一层加密，即：市面上 AppId + 非对称密钥 的方法
               该方案的主要原理是，即使被安装了 非法 CA 证书，Hacker Proxy 解密出来的数据，还是加密的，因为套了两层加密，能破解该方式的唯一方法就是 私钥泄漏
               该方案为提前协商密钥（即: 密钥提前发放）， 
               同样也无法应对使用 Browser 进行访问的场景，因为浏览器访问无法提前协商密钥
        @deprecated 没啥必要，直接用 access_token 加 HTTPS 就可以了，能绕过 HTTPS 那就肯定能获取到 私钥，不管是 反编译也好 逆向工程也好，甚至直接从内存中映射出来私钥。
              
        
 
TLS 应用：
    1. CA (Certification Autority) & User Certification: 对互联网上传输的数据进行加密，防止数据泄露 和 中间人攻击
    2. TSA (Timestamp Authority): 时间戳认证，用于对证书的产生时间进行认证，应用领域：金融交易
    
TLS 实际握手过程：
    握手阶段所有通信都是明文的
    1. 客户端发送加密通信请求 
        ClientHello {
            protocals: 客户端支持的协议版本
            random1:
            encrypts: 客户端支持的加密算法
            compresses: 客户端支持的压缩算法 
        }
    2. 服务器端回应 
        ServerHello {
            protocal: 确认使用的协议版本，如果 client 和 server 支持的版本不一致，那么 server 会关闭加密通信
            random2:
            encrypt: 确认使用的加密算法
            compress: 确认使用的压缩算法
            certificate: 服务器证书，该证书包含除了 CA 根证书以外的证书链
                         如果这里使用的是 DH 算法，这里发送的是服务器的 DH 参数，RSA 算法不需要这一步
        }
    2.5 服务器要求客户端上传证书到服务器，这一步可选，安全性要求高的场景会用到，比如 网银的 U 盘
    3. 客户端先验证证书是否是可信机构颁发的证书，并校验证书内容
       如果所有校验都通过，那么客户端回应
        ClientResponse {
            random3:
            notify: 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送
            handshakeEndFlag: 客户端握手阶段结束通知
            hash: 以上所有内容的 hash 值
        } 
    4. 服务器根据 random1, random2, random3 生成一个 对称密钥 （会话密钥），并用
       服务器回应
        ServerResponse {
            notify: 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送
            handshakeEndFlag: 服务器端握手阶段结束通知
            hash: 以上所有内容的 hash 值
        }
    5. 至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用"会话密钥"加密内容。
    
    
    
  
