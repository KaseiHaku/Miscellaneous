TLS/HTTPS 加密原理：
    
    原始：
        Server 直接使用明文给 Client 发送消息
        
    问题 1：
        传输内容会被 Hacker 截取、篡改
        
    改进一：
        Server 和 Client 约定一个 对称加密 的密钥，然后双方都使用该密钥对发送内容加密后再发送
    
    问题 1： 
        由于互联网环境 Server 和 Client 双方互不相认，那么必须通过明文先约定密钥才行，那么明文密钥在传输过程中被 Hacker 劫持了呢？
        如果被密钥被劫持，那么通信内容就完全暴露给 Hacker 了
        
    改进二：
        Server 和 Client 使用 不对称加密，Server 通过明文将公钥（任何人可见）传给 Client，
        Client 使用公钥加密数据后发送给 Server，
        Server 通过私钥解密后得到原文
        Client 给 Server 传数据则相反，
    
    问题 1：
        冒充问题：
        假如 Client 发送一个请求（包含　Client 的公钥）给 Server，Hacker 拦截并获取了该请求，
        然后 Hacker 又转发了 Client 的请求（修改为 Hacker 自己的公钥），将其发送给真正的 Server，
        真正的 Server 采用 Hacker 的公钥加密一个应答数据（包含 Server 的公钥）并给 Hacker，
        Hacker 使用自己的私钥解密应答数据，获取内容，
        Hakcer 假冒真正的 Server 使用 Client 的公钥重新加密获取的应答内容（包含 Hacker 的公钥），发送给 Client
        完成一次完整的请求应答过程，该过程中 Client 完全不知道数据已经被窃取。

        冒充数据流向：
        发送：Client - data -> 黑客 - data -> Server
        应答：Server - data -> 黑客 - data -> Client
    
    改进三：
        使用公信机构，即 CA(Certification Authority)机构
        操作系统 或 浏览器 本身预装一些他们信任的 根证书，那么 Client（浏览器） 就知道 根证书中的公钥是绝对正确的，
        Server 使用 HTTPS 前，向 CA机构 提交数字证书的证书内容（该内容包含 持有者的公钥、域名 等信息）用于制作数字证书
        CA 机构使用 Hash 算法对证书内容（明文）进行计算，得到证书内容的 消息摘要A，
        CA 机构使用 自己的 私钥 对生成的 消息摘要A 加密，那么所有拥有 CA机构公钥 的 Client 都可以得到 消息摘要A 的内容，
        Client 根据相同的 Hash 算法对 证书内容（明文）进行计算，得到 消息摘要B
        Client 对比 消息摘要A 和 B ，如果相等，则说明可信
        
        数字证书为什么不会被篡改？
        当证书内容被篡改，那么消息摘要肯定会改变。因为不对称加密，公钥私钥只能互解，如果 Hacker 不对消息摘要重新用 CA私钥加密，
        那么 Client 使用 CA公钥解密后的内容就会与计算出来的内容不一致，验证失败。
        
        数字证书为甚恶魔不会被掉包？
        数字证书内容部分是明文，Client 知道自己访问的是 www.google.com, 而返回的是 www.kasei.com ,那么肯定有问题。
        
        
        数字证书 = 证书内容 + 内容的数字签名（被 CA机构使用私钥加密）
        
        
 
TLS 应用：
    1. CA (Certification Autority) & User Certification: 对互联网上传输的数据进行加密，防止数据泄露 和 中间人攻击
    2. TSA (Timestamp Authority): 时间戳认证，用于对证书的产生时间进行认证，应用领域：金融交易
    
    
    
    
  
