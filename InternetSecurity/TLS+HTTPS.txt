TLS/HTTPS 加密原理：
    
    原始：
        Server 直接使用明文给 Client 发送消息
        
    问题 1：
        传输内容会被 Hacker 截取、篡改
        
    改进一：
        Server 和 Client 约定一个 对称加密 的密钥，然后双方都使用该密钥对发送内容加密后再发送
    
    问题 1： 
        由于互联网环境 Server 和 Client 双方互不相认，那么必须通过明文先约定密钥才行，那么明文密钥在传输过程中被 Hacker 劫持了呢？
        如果被密钥被劫持，那么通信内容就完全暴露给 Hacker 了
        
    改进二：
        Server 和 Client 使用 不对称加密，Server 通过明文将公钥（任何人可见）传给 Client，
        Client 使用公钥加密数据后发送给 Server，
        Server 通过私钥解密后得到原文
        Client 给 Server 传数据则相反，
    
    问题 1：
        冒充问题：
        假如 Client 发送一个请求（包含　Client 的公钥）给 Server，Hacker 拦截并获取了该请求，
        然后 Hacker 又转发了 Client 的请求（修改为 Hacker 自己的公钥），将其发送给真正的 Server，
        真正的 Server 采用 Hacker 的公钥加密一个应答数据（包含 Server 的公钥）并给 Hacker，
        Hacker 使用自己的私钥解密应答数据，获取内容，
        Hakcer 假冒真正的 Server 使用 Client 的公钥重新加密获取的应答内容（包含 Hacker 的公钥），发送给 Client
        完成一次完整的请求应答过程，该过程中 Client 完全不知道数据已经被窃取。

        冒充数据流向：
        发送：Client - data -> 黑客 - data -> Server
        应答：Server - data -> 黑客 - data -> Client
    
    改进三：
        使用公信机构，即 CA机构
        操作系统 或 浏览器 本身预装一些他们信任的 根证书，那么 Client（浏览器） 就知道 根证书中的公钥是绝对正确的
        
        Server 使用 HTTPS 前，向 CA机构  申请一份数字证书，数字证书里包含 证书持有者 和 证书持有者的公钥 等信息
        
        
        数字证书 = 证书内容 + 内容的数字签名（被 CA结构使用公钥加密）
    
    一：
    1. 计算机A 要给 计算机B 发送数据，不想给别人看到，所以约定使用对称加密 AES 进行加密
    问题：A 和 B 怎么保证密钥传输过程不被 黑客 窃取？
    思考：使用不对称加密即可
    
    改进：
    1. A 和 B 都使用 不对称加密，A 使用 B 的公钥加密给 B 传数据，B 使用 A 的公钥加密给 A 传数据
    问题1：A 如何获取 B 的公钥？世界上计算机那么多，不可能每个人都保存所有人的公钥
    思考1：使用集中式管理所有人的 公钥，例如：DNS
    问题2: A 给 B 发数据，A 如何知道 B 就是 B，而不是黑客冒充的？
        如果被冒充那么过程是这样的：  
        发送：A - data -> 黑客 - data -> B
        应答：B - data -> 黑客 - data -> A
    思考2：引入公信机构，所有人都知道这个公信机构的公钥，公信机构保存所有人的公钥
    
    改进：
    1. A 给 B 发送请求，B 给 A 发送自己的公钥，A 使用公信机构的公钥获取 B 的公钥，然后将两者进行对比，如果一样，那么说明 B 就是 B
