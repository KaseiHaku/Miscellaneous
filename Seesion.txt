Session 解决方案：
    cookie-session:
        cookie 保存一串 key，请求时放到 http header 中，服务器根据 key 找到对应的 session，取 session 中的内容当作 用户信息
        缺点：
            需要防止 CSRF 攻击
            不适用于 多端应用
    
    无状态的 JWT:
        session 内容保存在 jwt 中，客户端请求时，放到 http header 中传给服务器，服务器校验 jwt 是否合法，合法取出 jwt 中的信息作为当前 用户信息
        适用场景：有效期短，只希望被使用一次。
        例如：
            用户注册后发一封邮件让其激活账户，通常邮件中需要有一个链接，
            这个链接需要具备以下的特性：能够标识用户，该链接具有时效性（通常只允许几小时之内激活），不能被篡改以激活其他可能的账户，一次性的。
            这种场景就适合使用jwt
        缺点：
            颁发了之后，只能自动过期，无法手工标志过期
            XSS 还是防不住的
        
    有状态的 JWT:
        优点：
            适用 多端
            可以手动过期
        缺点:
            XSS 还是防不住的
