################################ Char ################################
# -     dash
# :     colon
# #     octothorpe, hashtag, pound key, number sign
# !     exclamation point 


################################ Collections: 藏品 ################################
# Null
ymlnull: ~          # 相当于 json 中 {"ymlnull": null}

# Date
ymldate: 2019/01/01

# Array List Set
ymlary1: [1, 2, 3]
ymlary2:
  - 1
  - 2
  - 3


# Object Map
ymlobj1: {name:zhangsan,age: 20}
ymlobj2:
  key1: value1
  key2: value2


# Composite
peoples:
  - name: zhangsan
    age: 22
  - name: lisi
    age: 20
  - {name: wangwu,age: 18}


################################ Structures: 结构 ################################
---       # 表示一个新的 yaml document 的开始
...       # 表示当前 yaml document 结束，且不开始一个新的 yaml document

'key1': val1    # 包含特殊字符的 key
"key2": val2    # 包含特殊字符的 key

# 当 key 为一个 array 时
? [ element1, element2 ]: val

? - element1
  - element2
: val

# 当 key 为一个 map 时
? {key1: val1, key2, val2}: val

? key1: val1
  key2: val2
: val


# YAML Anchors: 引用前面已有的配置，@trap 不仅仅是值，而是整个对象，包括子属性
ymlref1: &ref refValue
ymlref2: *ref             # 相当于 ymlref2: refValue

ymlref3: &ref2
  aa: aa
  bb: bb
ymlref4:
  <<: *ref2      # 继承  ymlref3 的配置，所以 ymlref4 同时有: aa,bb,cc;  @trap  该标记不能展开数组元素，如果是数组必须是整个引入
  << : [ *CENTER, *BIG ]    # 同时继承 两个
  cc: cc
  






################################ Scalars: 纯量，字面量 ################################
# YAML 各种字符串格式演示
# "str\nStr2"
ymlstr1: str\nStr2

# "strRow1 strRow2"   
ymlstr5: strRow1
 strRow2          # 该行前面至少有一个空格 才行，否则格式错误

# '' 中所有转义字符都不生效，除了 ' 自身
# "str b'ob\n gg"
ymlstr2: 'str b''ob\n gg'


# "" 中转义字符会生效，但是行末 \ 代表字符串的连续，前提是该 \ 不被之前的 \ 转义
# "aaabbb\ ccc\eee ddd fff "
ymlstr3: "aaa\       # 行末的 \ 代表字符串的连接 @trap 这里 \ 后面不能有任何字符，包括空格
 bbb\\               # 行末的 \ 被 \\ 转义成普通的 \ 而不具有特殊意义了
      ccc\\eee        # 子符串中间的 \ 代表转义字符
   ddd                # 不管前缀有多少个空格，最终都是一个空格
fff                   # 前面没空格，最终也是一个空格
 "                    

# "s\ntr"
ymlstr4: 's\ntr'       # 注意 \n 不转义，原样输出

# 文字块中 所有内容 原样输出
# "strRow1\nstrRow2\n"  使用文字块保留每行之间的 \n
ymlstr6: | 
 strRow1
 strRow2

# "strRow1\nstrRow2\n\n\n"  使用文字块保留每行之间的 \n，尾随空行也加入到文字块中，直到下一个字段开始
ymlstr6: |+
 strRow1
 strRow2



# "strRow1\nstrRow2"  删除文字块末尾的 \n
ymlstr8: |-
 strRow1
 strRow2

# 这里也有 >, >+, >-; 效果同 |, |+, |-
# "strRow1 strRow2\n"  使用文字块删除每行之间的 \n，但是每行之间会有一个空格
ymlstr9: >
 strRow1
 strRow2




################################ Tags: 标签 ################################
# Tag 是什么？ yaml 中用于标明当前 node 是哪种数据类型时，使用的标签
# 在 yaml 中，不带 tag 的 node 的 type 是根据 application 决定的
# Global Tags:
#   URI = schema:...  = tag:...
# Local Tags:
#   !local_tags

%YAML 1.2.2   # 表明当前 yaml 文件编写时，使用的是 1.2.2 规范

# node 命名空间管理，类似 xml 中的命名空间
# %TAG                  ns-tag-directive，指定当前 yaml 文档中使用的 命名空间   
# !yaml!                c-tag-handle，定义一个名为 !yaml! 的命名空间
# tag:yaml.org,2002     ns-tag-prefix，命名空间前缀
%TAG !yaml! tag:yaml.org,2002:      # URI = schema:  = tag:


# Failsafe Schema: 即保证可以正常工作的 yaml 模式
GenericMapping: !!map     # !!map 表示 强制类型转换，强转为 map
  key1: val1
  key2: val2

GenericSequence: !!seq
  - aaa
  - bbb

GenericString: !!str |-
  String: just a theory.

# JSON Schema: 即保证可以正常工作的 yaml 模式
# Tag
tag: !!int 234      # !!int 表示后续值的类型是 int
                    # @trap  !!xxx = 表示 xxx 是内建 tag; !yyy = 表示 yyy 是自定义 tag

person:
  !com.kh.dto.Person                # 表示转换成一个 Person 实例
  name: a
  age: 2

personAry:
  - !com.kh.dto.person.Student      # 表示转换成一个 Student 实例
    name: a
    age: 18
    grade: A
  - !com.kh.dto.person.Teacher      # 表示转换成一个 Teacher 实例
    name: a
    age: 18
    subject: Math
    







